// Layout do Projeto

// Tamanho do Container para dispositivos.
$container-xl: 1440px;
$container-l: 1216px;
$container-m: 960px;
$container-s: 620px;
$container-xs: 340px;

// Espaçamento padrão entre colunas.
$gutter: 30px;

// Mixin - Definindo responsividade através de funções, de forma automática.

// EX) Para aplicar em uma classe, responsividade em tela menor que 960px:
// @include responsive(s) {
//   SERÁ EXECUDATO O QUUE FOR PASSADO AQUI DENTRO!
// }

@mixin responsive($device) {
  @if $device == xl {
    // Para resoluções maiores que 1440px
    @media screen and (min-width: $container-xl) {
      @content;
    }
  } @else if $device == ul {
    // Para resoluções maiores que 960px
    @media screen and (min-width: $container-m) {
      @content;
    }
  } @else if $device == l {
    // Para resoluções entre 1140px e 1440px
    @media screen and (max-width: $container-xl) and (min-width: $container-l) {
      @content;
    }
  } @else if $device == m {
    // Para resoluções entre 960px e 1140px
    @media screen and (max-width: $container-l) and (min-width: $container-s) {
      @content;
    }
  } @else if $device == s {
    // Para resoluções menores que 960px
    @media screen and (max-width: $container-m) {
      @content;
    }
  } @else if $device == xs {
    // Para resoluções menores que 340px
    @media screen and (max-width: $container-xs) {
      @content;
    }
  }
}

// Função para dividir automaticamente a tela em Grids, são 12 no total.
// A função irá respeitar o tamanho de tela presente, com responsividade.
@function grid($col, $total: 14) {
  @return ($col / $total) * 100%;
}
// Looping da função p/ determinar tamanho do grid e responsividade.
@for $i from 1 through 14 {
  .grid-#{$i} {
    width: calc(#{grid($i)} - #{$gutter});
    margin: $gutter / 2;

    padding: 16px 0px;
    float: left;

    @include responsive(s) {
      width: calc(100% - #{$gutter});
      float: none;
    }
  }
}
// Looping da função p/ determinar apenas o tamnho do grid, sem "quebrar" a página.
@for $i from 1 through 14 {
  .grid-nobreak-#{$i} {
    width: calc(#{grid($i)} - #{$gutter});
    margin: $gutter / 2;

    padding: 16px 0px;
    float: left;
  }
}

// Estrutura de container para aplicar na página.
.container {
  max-width: $container-l; // Definindo tamanho padrão para container.
  margin: 0 auto; // Centralizando container.

  // padding: 64px 0px;

  // clearfix
  &::after {
    content: "";
    display: table;
    clear: both;
  }

  // Aplicando responsividade: ao chegar no 960px.
  @include responsive(s) {
    flex-direction: column;

    padding: 32px 8px !important;
  }
}

.disappear {
  @include responsive(s) {
    display: none;
  }
}

.display {
  display: block;
}

.display-none {
  display: none;
}

.hidden {
  // Evitar scroll para o lado, caso algum filho vaze o container.
  overflow: hidden;
}

.zindex-1 {
  z-index: -1;
}

.row {
  // clearfix
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

.relative {
  position: relative;
}

// Classes pré-definidas para FLEXBOX (Sempre aplicar na div pai)

// Alinhar elementos lado a lado.
.flex {
  display: flex;
}
// Flexbox p/ que os elementos fiquem alinhados da esquerda p/ direita.
.flex-start-row {
  display: flex;
  justify-content: flex-start;
  align-items: center;
  flex-direction: row;
}
// Flexbox p/ que os elementos fiquem alinhados da direita p/ esquerda.
.flex-end-row {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  flex-direction: row;
}
// Flexbox p/ que os elementos fiquem em alinhados em coluna da esquerda p/ direita.
.flex-start-column {
  display: flex;
  justify-content: center;
  align-items: flex-start;
  flex-direction: column;
}
// Flexbox p/ que os elementos fiquem centralizados verticalmente e horizontalmente.
.flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}
// Flexbox p/ que os elementos fiquem em colunas e centralizados.
.flex-center-column {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
}
// Flexbox p/ que os elementos fiquem alinhados em cada ponta da div.
.flex-space {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-direction: row;

  // Aplicar reponsividade.
  @include responsive(s) {
    //flex-direction: column;
    //align-items: flex-start;
  }
}
// Flexbox p/ que os elementos fiquem em colunas
.flex-column {
  display: flex;
  flex-direction: column;
}
// Flexbox p/ que os elementos quebrem a linha no container, quando necessario.
.flex-wrap {
  flex-wrap: wrap;
}

.float-left {
  float: left;
}

// Biblioteca Flexbox | Itens filhos

// PROPRIEDADES DO ELEMENTO -> flex: (flex-grow) (flex-shrink) (flex-basis)
// (flex-grow): Capacidade do elemento se expandir em relação aos outros.
// (flex-shrink): Capacidade do elemento se contrair em relação aos outros.
// (flex-basis): Definir tamanho inicial do elemento antes de qualquer expansão ou contração.
.flex-item-1 {
  flex: 1 1 360px;
}

.flex-item-2 {
  flex: 2 1 360px;
}

.flex-item-3 {
  flex: 3 1 360px;
}

.flex-item-4 {
  flex: 4 1 360px;
}

.flex-item-5 {
  flex: 5 1 360px;
}

.flex-auto {
  flex: 1 1 auto;
}

// Larguras e Alturas

// Altura automática p/ o elemento.
.h-100 {
  height: 100vh;
}

.h-100p {
  height: 100%;
}

.h-auto {
  height: auto !important;
}
// Largura automática p/ o elemento.
.w-auto {
  width: auto;
}
// Largura de 100% do tamanho p/ o elemento em relação ao pai.
.w-100 {
  width: 100% !important;
}
// Largura de 75% do tamanho p/ o elemento em relação ao pai.
.w-75 {
  width: 75%;
}
// Largura de 60% do tamanho p/ o elemento em relação ao pai.
.w-60 {
  width: 60%;
}
// Largura de 50% do tamanho p/ o elemento em relação ao pai.
.w-50 {
  width: 50%;
}
// Largura de 25% do tamanho p/ o elemento em relação ao pai.
.w-25 {
  width: 25%;
}

// Bordas

// Borda abaixo do elemento.
.bb-black {
  border-bottom: 1px solid $black-light;
}
// Borda acima do elemento.
.bt-black {
  border-top: 1px solid $black-light;
}
// Borda a esquerda do elemento.
.bl-black {
  border-left: 1px solid $black-light;
}
// Borda a direita do elemento.
.br-black {
  border-right: 1px solid $black-light;
}

// Borda MAIS GROSSA abaixo do elemento.
.bb-gray {
  border-bottom: 2px solid $black-normal;
}
// Borda MAIS GROSSA acima do elemento.
.bt-gray {
  border-top: 2px solid $black-normal;
}
// Borda MAIS GROSSA a esquerda do elemento.
.bl-gray {
  border-left: 2px solid $black-normal;
}
// Borda MAIS GROSSA a direita do elemento.
.br-gray {
  border-right: 2px solid $black-normal;
}

// Backgrounds
.bg-gray {
  background-color: $black-normal;
}

// Tamanhos para logos
.logo {
  max-width: 50px;
  min-width: 25px;
}

// Definições para fotos de profile (avatar).
.profile {
  width: 48px;
  height: 48px;

  border-radius: 50%;
}
.profile-big {
  width: 128px;
  height: 128px;

  border-radius: 50%;
}
.profile-img {
  border-radius: 50%;
  border: 2px solid $primary-normal;
}

// <===================== FIM DA CONFIGURAÇÃO PADRÃO =====================>

// Section Banner
.banner {
  background-image: url("/assets/img/banner.png");
  background-size: cover;
  background-repeat: no-repeat;

  padding: 143px 0px;

  @include responsive(s) {
    padding: 16px 0px;
  }
}

// Section Menu
.bg-header {
  background-color: $primary-normal;
}

.content-mobile {
  @include responsive(s) {
    justify-content: center;
    flex-direction: column;
  }
}

.no-break-mobile {
  @include responsive(s) {
    flex-direction: row;
  }
}

.bg-menu {
  background-color: $white-normal;

  ul li {
    list-style: none;
  }

  a {
    border-right: 1px solid $black-light;
    padding-right: 48px;

    &:hover {
      font-weight: bold;
    }
  }

  .menu-links {
    @include responsive(s) {
      padding: 16px 0px;
      overflow-x: scroll; // rolagem suave
      -webkit-overflow-scrolling: touch;
      //* Esconder barra de rolagem em navegadores:
      -ms-overflow-style: none; /* IE and Edge */
      scrollbar-width: none; /* Firefox */
    }
  }
  .menu-links::-webkit-scrollbar {
    //* Esconder barra de rolagem em navegadores:
    display: none; /* Chrome, Safari, Opera */
  }
}

// Filtros
.eventos {
  width: 100%;
  box-shadow: 0px 1px 4px 3px rgba(173, 131, 131, 0.1);
  -webkit-box-shadow: 0px 1px 4px 3px rgba(173, 131, 131, 0.1); /* Safari e Chrome */
  -moz-box-shadow: 0px 1px 4px 3px rgba(173, 131, 131, 0.1); /* Firefox */
  border-radius: 4px;
  &:focus {
    border: 2px solid $primary-normal;
    outline: none;
  }
}

.wrap-mobile {
  @include responsive(s) {
    flex-wrap: wrap;
  }
}

.calendar-width {
  width: 407px;

  @include responsive(m) {
    padding-right: 270px;
  }

  @include responsive(s) {
    width: 160% !important;
  } 
}

// Accordions
.accordion {
  cursor: pointer;
}

.question {
  padding: 16px;
  position: relative;

  &::before {
    content: "";
    position: absolute;
    width: 32px;
    height: 32px;
    background-image: url("/assets/svg/icon-arrow-down.svg");
    background-repeat: no-repeat;
    background-size: cover;

    top: 50%;
    right: 0;

    transform: translate(-50%, -50%);
  }
}

.question-active {
  background-color: $primary-normal;
  color: $white-normal;
  position: relative;

  &::before {
    content: "";
    position: absolute;
    width: 32px;
    height: 32px;
    background-image: url("/assets/svg/icon-arrow-up.svg");
    background-repeat: no-repeat;
    background-size: cover;

    top: 50%;
    right: 0;

    transform: translate(-50%, -50%);
  }
}

.bg-section-gray {
  background: #f2f2f2 !important;
}
